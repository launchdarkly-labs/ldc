swagger: '2.0'
info:
  title: LaunchDarkly REST API
  description: Build custom integrations with the LaunchDarkly REST API
  termsOfService: 'https://launchdarkly.com/terms'
  contact:
    name: LaunchDarkly Support
    url: 'https://support.launchdarkly.com'
    email: support@launchdarkly.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 2.0.13
host: app.launchdarkly.com
basePath: /api/v2
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Token:
    type: apiKey
    name: Authorization
    in: header
    description: 'https://app.launchdarkly.com/settings#/tokens'
security:
  - Token: []
paths:
  /projects:
    get:
      summary: Returns a list of all projects in the account.
      operationId: getProjects
      responses:
        '200':
          description: Projects response
          schema:
            $ref: '#/definitions/Projects'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Projects
    post:
      summary: Create a new project with the given key and name.
      operationId: postProject
      parameters:
        - $ref: '#/parameters/ProjectPostRequest'
      responses:
        '201':
          $ref: '#/responses/Standard201'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Projects
  '/projects/{projectKey}':
    get:
      summary: Fetch a single project by key.
      operationId: getProject
      parameters:
        - $ref: '#/parameters/ProjectKey'
      responses:
        '200':
          $ref: '#/responses/Projects200'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Projects
    patch:
      summary: Modify a project by ID.
      operationId: patchProject
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/PatchRequest'
      responses:
        '200':
          $ref: '#/responses/Projects200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Projects
    delete:
      summary: >-
        Delete a project by key. Caution-- deleting a project will delete all
        associated environments and feature flags. You cannot delete the last
        project in an account.
      operationId: deleteProject
      parameters:
        - $ref: '#/parameters/ProjectKey'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Projects
  '/projects/{projectKey}/environments':
    post:
      summary: >-
        Create a new environment in a specified project with a given name, key,
        and swatch color.
      operationId: postEnvironment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentPostRequest'
      responses:
        '201':
          $ref: '#/responses/Standard201'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Environments
  '/projects/{projectKey}/environments/{environmentKey}':
    get:
      summary: Get an environment given a project and key.
      operationId: getEnvironment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
      responses:
        '200':
          description: Environment response.
          schema:
            $ref: '#/definitions/Environment'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Environments
    patch:
      summary: Modify an environment by ID.
      operationId: patchEnvironment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/PatchRequest'
      responses:
        '200':
          description: Environment response.
          schema:
            $ref: '#/definitions/Environment'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Environments
    delete:
      summary: Delete an environment in a specific project.
      operationId: deleteEnvironment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Environments
  '/flags/{projectKey}':
    get:
      summary: Get a list of all features in the given project.
      operationId: getFeatureFlags
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKeyQuery'
        - $ref: '#/parameters/Tag'
      responses:
        '200':
          description: Flags response.
          schema:
            $ref: '#/definitions/FeatureFlags'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Feature flags
    post:
      summary: Creates a new feature flag.
      operationId: postFeatureFlag
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/FeatureFlagPostRequest'
        - $ref: '#/parameters/CloneFlagKeyQuery'
      responses:
        '201':
          description: Flag response.
          schema:
            $ref: '#/definitions/FeatureFlag'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Feature flags
  '/flags/{projectKey}/{featureFlagKey}':
    get:
      summary: Get a single feature flag by key.
      operationId: getFeatureFlag
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/FeatureFlagKey'
        - $ref: '#/parameters/EnvironmentKeyQuery'
      responses:
        '200':
          description: Flag response.
          schema:
            $ref: '#/definitions/FeatureFlag'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Feature flags
    patch:
      summary: Perform a partial update to a feature.
      operationId: patchFeatureFlag
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/FeatureFlagKey'
        - $ref: '#/parameters/PatchWithComment'
      responses:
        '200':
          description: Feature flag response.
          schema:
            $ref: '#/definitions/FeatureFlag'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Feature flags
    delete:
      summary: >-
        Delete a feature flag in all environments. Be careful-- only delete
        feature flags that are no longer being used by your application.
      operationId: deleteFeatureFlag
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/FeatureFlagKey'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Feature flags
  '/flags/{projectKey}/{environmentKey}/{featureFlagKey}/copy':
    post:
      summary: >-
        Copies the feature flag configuration from one environment to the same
        feature flag in another environment.
      operationId: copyFeatureFlag
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/FeatureFlagKey'
      responses:
        '201':
          description: Flag confguration copy response.
          schema:
            $ref: '#/definitions/FeatureFlag'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Feature flags
  '/flag-statuses/{projectKey}/{environmentKey}':
    get:
      summary: >-
        Get a list of statuses for all feature flags. The status includes the
        last time the feature flag was requested, as well as the state of the
        flag.
      operationId: getFeatureFlagStatuses
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
      responses:
        '200':
          description: List of feature flag statuses.
          schema:
            $ref: '#/definitions/FeatureFlagStatuses'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Feature flags
  '/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}':
    get:
      summary: Get the status for a particular feature flag.
      operationId: getFeatureFlagStatus
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/FeatureFlagKey'
      responses:
        '200':
          description: Status of the requested feature flag.
          schema:
            $ref: '#/definitions/FeatureFlagStatus'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Feature flags
  '/segments/{projectKey}/{environmentKey}':
    get:
      summary: Get a list of all user segments in the given project.
      operationId: getUserSegments
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/Tag'
      responses:
        '200':
          description: Segments response.
          schema:
            $ref: '#/definitions/UserSegments'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - User segments
    post:
      summary: Creates a new user segment.
      operationId: postUserSegment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserSegmentPostRequest'
      responses:
        '201':
          $ref: '#/responses/Standard201'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - User segments
  '/segments/{projectKey}/{environmentKey}/{userSegmentKey}':
    get:
      summary: Get a single user segment by key.
      operationId: getUserSegment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserSegmentKey'
      responses:
        '200':
          description: User segment response.
          schema:
            $ref: '#/definitions/UserSegment'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - User segments
    patch:
      summary: Perform a partial update to a user segment.
      operationId: patchUserSegment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserSegmentKey'
        - $ref: '#/parameters/PatchOnly'
      responses:
        '200':
          $ref: '#/responses/UserSegment200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - User segments
    delete:
      summary: Delete a user segment.
      operationId: deleteUserSegment
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserSegmentKey'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - User segments
  '/users/{projectKey}/{environmentKey}':
    get:
      summary: >-
        List all users in the environment. Includes the total count of users. In
        each page, there will be up to 'limit' users returned (default 20). This
        is useful for exporting all users in the system for further analysis.
        Paginated collections will include a next link containing a URL with the
        next set of elements in the collection.
      operationId: getUsers
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/HMAC'
        - $ref: '#/parameters/ScrollId'
      responses:
        '200':
          description: Users response.
          schema:
            $ref: '#/definitions/Users'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Users
  '/user-search/{projectKey}/{environmentKey}':
    get:
      summary: >-
        Search users in LaunchDarkly based on their last active date, or a
        search query. It should not be used to enumerate all users in
        LaunchDarkly-- use the List users API resource.
      operationId: getSearchUsers
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/Query'
        - $ref: '#/parameters/Limit'
        - $ref: '#/parameters/Offset'
        - $ref: '#/parameters/After'
      responses:
        '200':
          description: Users response.
          schema:
            $ref: '#/definitions/Users'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Users
  '/users/{projectKey}/{environmentKey}/{userKey}':
    get:
      summary: Get a user by key.
      operationId: getUser
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserKey'
      responses:
        '200':
          description: User response.
          schema:
            $ref: '#/definitions/User'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Users
    delete:
      summary: Delete a user by ID.
      operationId: deleteUser
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserKey'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Users
  '/users/{projectKey}/{environmentKey}/{userKey}/flags':
    get:
      summary: Fetch a single flag setting for a user by key.
      operationId: getUserFlagSettings
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserKey'
      responses:
        '200':
          description: User flags settings response.
          schema:
            $ref: '#/definitions/UserFlagSettings'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - User settings
  '/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}':
    get:
      summary: Fetch a single flag setting for a user by key.
      operationId: getUserFlagSetting
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserKey'
        - $ref: '#/parameters/FeatureFlagKey'
      responses:
        '200':
          description: User flag setting response.
          schema:
            $ref: '#/definitions/UserFlagSetting'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - User settings
    put:
      summary: >-
        Specifically enable or disable a feature flag for a user based on their
        key.
      operationId: putFlagSetting
      parameters:
        - $ref: '#/parameters/ProjectKey'
        - $ref: '#/parameters/EnvironmentKey'
        - $ref: '#/parameters/UserKey'
        - $ref: '#/parameters/FeatureFlagKey'
        - $ref: '#/parameters/UserSettingsPutRequest'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - User settings
  /auditlog:
    get:
      summary: >-
        Get a list of all audit log entries. The query parameters allow you to
        restrict the returned results by date ranges, resource specifiers, or a
        full-text search query.
      operationId: getAuditLogEntries
      parameters:
        - $ref: '#/parameters/Before'
        - $ref: '#/parameters/After'
        - $ref: '#/parameters/Q'
        - $ref: '#/parameters/AuditLimit'
        - $ref: '#/parameters/Spec'
      responses:
        '200':
          description: Audit log entries response.
          schema:
            $ref: '#/definitions/AuditLogEntries'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Audit log
  '/auditlog/{resourceId}':
    get:
      summary: Use this endpoint to fetch a single audit log entry by its resouce ID.
      operationId: getAuditLogEntry
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        '200':
          description: Audit log entry response.
          schema:
            $ref: '#/definitions/AuditLogEntry'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Audit log
  /webhooks:
    get:
      summary: Fetch a list of all webhooks.
      operationId: getWebhooks
      responses:
        '200':
          description: Webhooks response.
          schema:
            $ref: '#/definitions/Webhooks'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Webhooks
    post:
      summary: Create a webhook.
      operationId: postWebhook
      parameters:
        - $ref: '#/parameters/WebhookPostRequest'
      responses:
        '201':
          $ref: '#/responses/Standard201'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Webhooks
  '/webhooks/{resourceId}':
    get:
      summary: Get a webhook by ID.
      operationId: getWebhook
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        '200':
          $ref: '#/responses/Webhooks200'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Webhooks
    patch:
      summary: Modify a webhook by ID.
      operationId: patchWebhook
      parameters:
        - $ref: '#/parameters/ResourceId'
        - $ref: '#/parameters/PatchRequest'
      responses:
        '200':
          $ref: '#/responses/Webhooks200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Webhooks
    delete:
      summary: Delete a webhook by ID.
      operationId: deleteWebhook
      parameters:
        - $ref: '#/parameters/ResourceId'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Webhooks
  /roles:
    get:
      summary: Return a complete list of custom roles.
      operationId: getCustomRoles
      responses:
        '200':
          description: Custom roles response.
          schema:
            $ref: '#/definitions/CustomRoles'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Custom roles
    post:
      summary: Create a new custom role.
      operationId: postCustomRole
      parameters:
        - $ref: '#/parameters/CustomRolePostRequest'
      responses:
        '201':
          $ref: '#/responses/Standard201'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Custom roles
  '/roles/{customRoleKey}':
    get:
      summary: Get one custom role by key.
      operationId: getCustomRole
      parameters:
        - $ref: '#/parameters/CustomRoleKey'
      responses:
        '200':
          $ref: '#/responses/CustomRole200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Custom roles
    patch:
      summary: Modify a custom role by key.
      operationId: patchCustomRole
      parameters:
        - $ref: '#/parameters/CustomRoleKey'
        - $ref: '#/parameters/PatchRequest'
      responses:
        '200':
          $ref: '#/responses/CustomRole200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Custom roles
    delete:
      summary: Delete a custom role by key.
      operationId: deleteCustomRole
      parameters:
        - $ref: '#/parameters/CustomRoleKey'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Custom roles
  /members:
    get:
      summary: Returns a list of all members in the account.
      operationId: getMembers
      responses:
        '200':
          description: Projects response.
          schema:
            $ref: '#/definitions/Members'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Team members
    post:
      summary: Invite new members.
      operationId: postMembers
      parameters:
        - $ref: '#/parameters/MembersPostRequest'
      responses:
        '201':
          $ref: '#/responses/Standard201'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Team members
  '/members/{memberId}':
    get:
      summary: Get a single team member by ID.
      operationId: getMember
      parameters:
        - $ref: '#/parameters/MemberId'
      responses:
        '200':
          $ref: '#/responses/Member200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Team members
    patch:
      summary: Modify a team member by ID.
      operationId: patchMember
      parameters:
        - $ref: '#/parameters/MemberId'
        - $ref: '#/parameters/PatchRequest'
      responses:
        '200':
          $ref: '#/responses/Member200'
        '400':
          $ref: '#/responses/Standard400'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
        '409':
          $ref: '#/responses/Standard409'
      tags:
        - Team members
    delete:
      summary: Delete a team member by ID.
      operationId: deleteMember
      parameters:
        - $ref: '#/parameters/MemberId'
      responses:
        '204':
          $ref: '#/responses/Standard204'
        '401':
          $ref: '#/responses/Standard401'
        '404':
          $ref: '#/responses/Standard404'
      tags:
        - Team members
  /:
    get:
      description: >-
        You can issue a GET request to the root resource to find all of the
        resource categories supported by the API.
      operationId: getRoot
      responses:
        '200':
          $ref: '#/responses/Root200'
        '401':
          $ref: '#/responses/Standard401'
      tags:
        - Root
definitions:
  Link:
    type: object
    properties:
      href:
        type: string
        example: /api/v2/endpoint
      type:
        type: string
        example: application/json
  Links:
    type: object
    properties:
      self:
        $ref: '#/definitions/Link'
      next:
        $ref: '#/definitions/Link'
  Webhook:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      _id:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      url:
        type: string
        description: The URL of the remote webhook.
        example: 'https://example.com/example'
      secret:
        type: string
        description: >-
          If defined, the webhooks post request will include a X-LD-Signature
          header whose value will contain an HMAC SHA256 hex digest of the
          webhook payload, using the secret as the key.
        example: frobozz
      'on':
        type: boolean
        description: Whether this webhook is enabled or not.
        example: true
      name:
        type: string
        description: The name of the webhook.
        example: Example hook
      tags:
        type: array
        description: Tags assigned to this webhook.
        items:
          type: string
          example: []
  Webhooks:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: array
        items:
          $ref: '#/definitions/Webhook'
  FeatureFlag:
    type: object
    properties:
      key:
        type: string
        example: test-feature
      name:
        type: string
        description: Name of the feature flag.
        example: Test Feature
      description:
        type: string
        description: Description of the feature flag.
        example: This flag controls whether test feature is turned on or not.
      kind:
        type: string
        description: Whether the feature flag is a boolean flag or multivariate.
        example: boolean
      creationDate:
        type: number
        format: int64
        description: >-
          A unix epoch time in milliseconds specifying the creation time of this
          flag.
        example: 1443652232590
      includeInSnippet:
        type: boolean
        example: false
      temporary:
        type: boolean
        description: Whether or not this flag is temporary.
        example: false
      maintainerId:
        type: string
        description: The ID of the member that should maintain this flag.
        example: 561c579cd8fd5c2704000001
      tags:
        type: array
        description: An array of tags for this feature flag.
        items:
          type: string
        example: []
      variations:
        type: array
        description: The variations for this feature flag.
        items:
          $ref: '#/definitions/Variation'
        example:
          - value: a
          - value: b
      goalIds:
        type: array
        description: An array goals from all environments associated with this feature flag
        items:
          type: string
        example:
          - d7239405bd89c930e885aa76
          - 405bc930e88d7239d895aa76
      _version:
        type: integer
        example: 23
      customProperties:
        type: object
        description: A mapping of keys to CustomProperty entries.
        additionalProperties:
          $ref: '#/definitions/CustomProperty'
        example:
          bugs:
            name: Issue tracker ids
            value:
              - '123'
              - '456'
          deprecated:
            name: Deprecated Date
            value: []
      _links:
        $ref: '#/definitions/Links'
      _maintainer:
        $ref: '#/definitions/Member'
      environments:
        type: object
        additionalProperties:
          $ref: '#/definitions/FeatureFlagConfig'
  FeatureFlags:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: array
        items:
          $ref: '#/definitions/FeatureFlag'
  Member:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      _id:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      role:
        $ref: '#/definitions/Role'
      email:
        type: string
        example: user@launchdarkly.com
      _pendingInvite:
        type: boolean
      isBeta:
        type: boolean
      customRoles:
        type: array
        items:
          type: string
          description: The unique resource id.
          example: "5a580a01b4ff89217bdf9dc1"
  Members:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        $ref: '#/definitions/Member'
  FeatureFlagConfig:
    type: object
    properties:
      'on':
        type: boolean
      archived:
        type: boolean
      salt:
        type: string
        example: YWx0ZXJuYXRlLnBhZ2U=
      sel:
        type: string
        example: 45501b9314dc4641841af774cb038b96
      lastModified:
        type: integer
        format: int64
        example: 1469326565348
      version:
        type: integer
        example: 65
      targets:
        type: array
        items:
          $ref: '#/definitions/Target'
      rules:
        type: array
        items:
          $ref: '#/definitions/Rule'
      fallthrough:
        $ref: '#/definitions/Fallthrough'
      offVariation:
        type: integer
      prerequisites:
        type: array
        items:
          $ref: '#/definitions/Prerequisite'
      trackEvents:
        type: boolean
        example: false
        description: Set to true to send detailed event information for this flag.
  Target:
    type: object
    properties:
      values:
        type: array
        items:
          type: string
          example: '"1461797806427-7-115540266", "00142875-a39d-4028-a3b7-987ccd151649"'
      variation:
        type: integer
  Rule:
    type: object
    properties:
      _id:
        type: string
      variation:
        type: integer
      rollout:
        $ref: '#/definitions/Rollout'
      clauses:
        type: array
        items:
          $ref: '#/definitions/Clause'
  Fallthrough:
    type: object
    properties:
      variation:
        type: integer
      rollout:
        $ref: '#/definitions/Rollout'
  Rollout:
    type: object
    properties:
      variations:
        type: array
        items:
          $ref: '#/definitions/WeightedVariation'
  WeightedVariation:
    type: object
    properties:
      variation:
        type: integer
      weight:
        type: integer
  Clause:
    type: object
    properties:
      attribute:
        type: string
        example: groups
      op:
        type: string
        example: in
      values:
        type: array
        items:
          type: object
          example: Top Customers
      negate:
        type: boolean
  Variation:
    type: object
    required:
      - value
    properties:
      name:
        type: string
        example: 'True'
      description:
        type: string
        example: The true variation
      value:
        type: object
  Prerequisite:
    type: object
    properties:
      key:
        type: string
      variation:
        type: integer
  FeatureFlagStatus:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      name:
        type: string
        description: >
          | Name     | Description |

          | --------:| ----------- |

          | new      | the feature flag was created within the last 7 days, and
          has not been requested yet |

          | active   | the feature flag was requested by your servers or clients
          within the last 7 days |

          | inactive | the feature flag was created more than 7 days ago, and
          hasn't been requested by your servers or clients within the past 7
          days |

          | launched | one variation of the feature flag has been rolled out to
          all your users for at least 7 days |
        enum:
          - new
          - active
          - inactive
          - launched
      lastRequested:
        type: string
        example: '2016-08-16T21:10:11.886Z'
      default:
        type: object
  FeatureFlagStatuses:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: array
        items:
          $ref: '#/definitions/FeatureFlagStatus'
  UserSegment:
    type: object
    required:
      - key
      - name
      - creationDate
    properties:
      key:
        type: string
        description: Unique identifier for the user segment.
        example: beta-testers
      name:
        type: string
        description: Name of the user segment.
        example: Beta Testers
      description:
        type: string
        description: Description of the user segment.
        example: Users in this segment can access beta features.
      tags:
        type: array
        items:
          type: string
        example:
          - dev
          - ops
        description: An array of tags for this user segment.
      creationDate:
        type: number
        format: int64
        description: >-
          A unix epoch time in milliseconds specifying the creation time of this
          flag.
        example: 1443652232590
      included:
        type: array
        items:
          type: string
        description: An array of user keys that are included in this segment.
      excluded:
        type: array
        items:
          type: string
        description: >-
          An array of user keys that should not be included in this segment,
          unless they are also listed in "included".
      rules:
        type: array
        items:
          $ref: '#/definitions/UserSegmentRule'
        description: >-
          An array of rules that can cause a user to be included in this
          segment.
      version:
        type: integer
      _links:
        $ref: '#/definitions/Links'
  UserSegmentRule:
    type: object
    properties:
      clauses:
        type: array
        items:
          $ref: '#/definitions/Clause'
      weight:
        type: integer
      bucketBy:
        type: string
  UserSegments:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: array
        items:
          $ref: '#/definitions/UserSegment'
  Project:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      _id:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      key:
        type: string
        example: zentasks
      name:
        type: string
        example: Zentasks
      environments:
        type: array
        items:
          $ref: '#/definitions/Environment'
      tags:
        type: array
        items:
          type: string
        description: An array of tags for this project.
  Projects:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: array
        items:
          $ref: '#/definitions/Project'
  Environment:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      _id:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      key:
        type: string
        example: production
        description: The key for the environment.
      name:
        type: string
        example: Production
        description: The name of the environment.
      apiKey:
        type: string
        example: XXX
        description: The SDK key for backend LaunchDarkly SDKs.
      mobileKey:
        type: string
        example: XXX
        description: The SDK key for mobile LaunchDarkly SDKs.
      color:
        type: string
        example: '417505'
        description: The swatch color for the environment.
      defaultTtl:
        type: number
        example: 0
        description: The default TTL.
      secureMode:
        type: boolean
        example: false
        description: Determines if this environment is in safe mode.
      defaultTrackEvents:
        type: boolean
        example: false
        description: Set to true to send detailed event information for new flags.
      tags:
        type: array
        items:
          type: string
        description: An array of tags for this environment.
  EnvironmentPost:
    type: object
    properties:
      name:
        type: string
        description: The name of the new environment.
        example: Development
      key:
        type: string
        description: A project-unique key for the new environment.
        example: dev
      color:
        type: string
        description: 'A color swatch (as an RGB hex value with no leading ''#'', e.g. C8C8C8).'
        example: '417505'
      defaultTtl:
        type: number
        description: The default TTL for the new environment.
        example: 0
    required:
      - name
      - key
      - color
  User:
    type: object
    properties:
      key:
        type: string
        example: a00bea
      secondary:
        type: string
      ip:
        type: string
      country:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      avatar:
        type: string
      name:
        type: string
        example: Bob Loblaw
      anonymous:
        type: boolean
      custom:
        type: object
        example:
          company: example.com
  UserRecord:
    type: object
    properties:
      lastPing:
        type: string
        format: int64
        example: '2015-03-03T02:37:22.492Z'
      environmentId:
        type: string
        example: 54ac2d97de674204ddd61096
      ownerId:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      user:
        $ref: '#/definitions/User'
      avatar:
        type: string
        example: 'https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg'
  Users:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      totalCount:
        type: number
        example: 3
      items:
        type: array
        items:
          $ref: '#/definitions/UserRecord'
  AuditLogEntry:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      _id:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      date:
        type: integer
        format: int64
        example: 1472243938774
      kind:
        type: string
        example: environment
      name:
        type: string
        example: Testing
      description:
        type: string
        example: Changed the name from Test to Testing
      shortDescription:
        type: string
        example: '""'
      comment:
        type: string
        example: This is a comment string
      member:
        $ref: '#/definitions/Member'
      titleVerb:
        type: string
        example: changed the name of
      title:
        type: string
        example: >-
          [Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name of
          [Testing](https://app.launchdarkly.com/settings#/projects)
      target:
        type: object
        properties:
          _links:
            $ref: '#/definitions/Links'
          name:
            type: string
            example: Testing
          resources:
            type: array
            items:
              type: string
              example: 'proj/alexis:env/test'
  AuditLogEntries:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: array
        items:
          $ref: '#/definitions/AuditLogEntry'
  UserFlagSetting:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      _value:
        type: boolean
        description: >-
          The most important attribute in the response. The _value is the
          current setting for the user. For a boolean feature toggle, this will
          be true, false, or null if there is no defined fallthrough value.
        example: true
      setting:
        type: boolean
        description: >-
          The setting attribute indicates whether you've explicitly targeted
          this user to receive a particular variation. For example, if you have
          explicitly turned off a feature toggle for a user, setting will be
          false. A setting of null means that you haven't assigned that user to
          a specific variation.
        example: null
  UserFlagSettings:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        type: object
        additionalProperties:
          $ref: '#/definitions/UserFlagSetting'
        example:
          sort.order:
            _links:
              self:
                href: /api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order
                type: application/json
              _value: true
              setting: null
          alternate.page:
            _links:
              self:
                href: >-
                  /api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page
                type: application/json
            _value: 'false,'
            setting: null
  Statements:
    type: array
    items:
      $ref: '#/definitions/Statement'
  Statement:
    type: object
    properties:
      resources:
        $ref: '#/definitions/Resources'
      notresources:
        $ref: '#/definitions/Resources'
        description: >-
          Targeted resource will be those resources NOT in this list. The
          "resources`" field must be empty to use this field.
      actions:
        $ref: '#/definitions/Actions'
      notactions:
        $ref: '#/definitions/Actions'
        description: >-
          Targeted actions will be those actions NOT in this list. The "actions"
          field must be empty to use this field.
      effect:
        type: string
        enum:
          - allow
          - deny
  Resources:
    type: array
    items:
      $ref: '#/definitions/Resource'
  Resource:
    type: string
    description: A resource specifier string
    example: 'proj/*:env/*:flag/my-flag'
  Actions:
    type: array
    items:
      $ref: '#/definitions/Action'
  Action:
    type: string
    description: An action to perform on a resource.
    example: updateOn
  Role:
    type: string
    enum:
      - writer
      - reader
      - admin
      - owner
  CustomRoleKeyOrId:
    type: string
    description: The 20-hexdigit id or the key for a custom role.
    example: revenue-team
  CustomRole:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      name:
        type: string
        description: Name of the custom role.
        example: revenue team
      key:
        $ref: '#/definitions/CustomRoleKeyOrId'
      description:
        type: string
        description: Description of the custom role.
        example: Description of revenue team role here
      _id:
        type: string
        description: The unique resource id.
        example: "5a580a01b4ff89217bdf9dc1"
      policy:
        type: array
        items:
          $ref: '#/definitions/Policy'
  CustomRoles:
    type: object
    properties:
      _links:
        $ref: '#/definitions/Links'
      items:
        $ref: '#/definitions/CustomRole'
  Policy:
    type: object
    properties:
      resources:
        $ref: '#/definitions/Resources'
      actions:
        $ref: '#/definitions/Actions'
      effect:
        type: string
        description: Effect of the policy - allow or deny.
        example: deny
  Id:
    type: string
    description: The unique resource id.
    example: 5a580a01b4ff89217bdf9dc1
  PatchOperation:
    type: object
    properties:
      op:
        type: string
        example: replace
      path:
        type: string
        example: /on
      value:
        type: object
    required:
      - op
      - path
      - value
  CustomProperty:
    type: object
    description: A name and value describing a custom property.
    properties:
      name:
        type: string
        description: The name of the property.
        example: My property
      value:
        $ref: '#/definitions/CustomPropertyValues'
    required:
      - name
  CustomPropertyValues:
    type: array
    description: Values for this property.
    items:
      type: string
    example:
      - Value 1
      - Value 2
responses:
  Standard201:
    description: Resource created.
  Standard204:
    description: Action completed successfully.
  Standard400:
    description: Invalid request body.
  Standard401:
    description: Invalid access token.
  Standard404:
    description: Invalid resource specifier.
  Standard409:
    description: Status conflict.
  Root200:
    description: A list of links to available resources in the API.
    schema:
      $ref: '#/definitions/Links'
  Webhooks200:
    description: Webhook response.
    schema:
      $ref: '#/definitions/Webhook'
  UserSegment200:
    description: User segment response.
    schema:
      $ref: '#/definitions/UserSegment'
  Projects200:
    description: Successful Project response.
    schema:
      $ref: '#/definitions/Project'
  Member200:
    description: Member response.
    schema:
      $ref: '#/definitions/Member'
  CustomRole200:
    description: Custom role response.
    schema:
      $ref: '#/definitions/CustomRole'
parameters:
  ResourceId:
    name: resourceId
    in: path
    required: true
    description: The resource ID.
    type: string
  WebhookPostRequest:
    name: webhookBody
    in: body
    required: true
    description: New webhook.
    schema:
      type: object
      properties:
        url:
          example: 'https://example.com/example'
          type: string
          description: The URL of the remote webhook.
        secret:
          example: <password>
          type: string
          description: >-
            If sign is true, and the secret attribute is omitted, LaunchDarkly
            will automatically generate a secret for you.
        sign:
          type: boolean
          description: >-
            If sign is false, the webhook will not include a signature header,
            and the secret can be omitted.
        'on':
          type: boolean
          example: true
          description: Whether this webhook is enabled or not.
        name:
          type: string
          example: Example hook
          description: The name of the webhook.
      required:
        - url
        - sign
        - 'on'
  FeatureFlagPostRequest:
    name: featureFlagBody
    in: body
    required: true
    description: Create a new feature flag.
    schema:
      type: object
      properties:
        name:
          type: string
          description: >-
            A human-friendly name for the feature flag. Remember to note if this
            flag is intended to be temporary or permanent.
          example: new test flag
        key:
          type: string
          description: A unique key that will be used to reference the flag in your code.
          example: new-test-flag
        description:
          type: string
          description: A description of the feature flag.
          example: This flag controls whether test feature is turned on or not.
        variations:
          type: array
          items:
            $ref: '#/definitions/Variation'
          description: An array of possible variations for the flag.
        temporary:
          type: boolean
          description: Whether or not the flag is a temporary flag.
        tags:
          type: array
          items:
            type: string
            example: []
          description: Tags for the feature flag.
        includeInSnippet:
          type: boolean
          description: >-
            Whether or not this flag should be made available to the client-side
            JavaScript SDK.
      required:
        - name
        - key
        - variations
  UserSegmentPostRequest:
    name: userSegmentBody
    in: body
    required: true
    description: Create a new user segment.
    schema:
      type: object
      properties:
        name:
          type: string
          description: A human-friendly name for the user segment.
          example: new segment
        key:
          type: string
          description: >-
            A unique key that will be used to reference the user segment in
            feature flags.
          example: new-segment
        description:
          type: string
          description: A description for the user segment.
          example: Users in this segment will have access to beta features.
        tags:
          type: array
          items:
            type: string
            example: []
          description: Tags for the user segment.
      required:
        - name
        - key
  ProjectPostRequest:
    name: projectBody
    in: body
    required: true
    description: Project keys must be unique within an account.
    schema:
      type: object
      properties:
        name:
          type: string
          example: New Project
        key:
          type: string
          example: new-project
        environments:
          type: array
          items:
            $ref: '#/definitions/EnvironmentPost'
          minLength: 1
      required:
        - name
        - key
  EnvironmentPostRequest:
    name: environmentBody
    in: body
    required: true
    description: New environment.
    schema:
      $ref: '#/definitions/EnvironmentPost'
  ProjectKey:
    name: projectKey
    in: path
    required: true
    description: >-
      The project key, used to tie the flags together under one project so they
      can be managed together.
    type: string
  EnvironmentKey:
    name: environmentKey
    in: path
    required: true
    description: >-
      The environment key, used to tie together flag configuration and users
      under one environment so they can be managed together.
    type: string
  EnvironmentKeyQuery:
    name: env
    in: query
    required: false
    description: >-
      By default, each feature will include configurations for each environment.
      You can filter environments with the env query parameter. For example,
      setting env=production will restrict the returned configurations to just
      your production environment.
    type: string
  FeatureFlagKey:
    name: featureFlagKey
    in: path
    required: true
    description: The feature flag's key. The key identifies the flag in your code.
    type: string
  CloneFlagKeyQuery:
    name: clone
    in: query
    required: false
    description: >-
      The key of the feature flag to be cloned. The key identifies the flag in
      your code.  For example, setting clone=flagKey will copy the full
      targeting configuration for all environments (including on/off state) from
      the original flag to the new flag.
    type: string
  UserSegmentKey:
    name: userSegmentKey
    in: path
    required: true
    description: The user segment's key. The key identifies the user segment in your code.
    type: string
  UserKey:
    name: userKey
    in: path
    required: true
    description: The user's key.
    type: string
  Tag:
    name: tag
    in: query
    required: false
    description: Filter by tag. A tag can be used to group flags across projects.
    type: string
  Limit:
    name: limit
    in: query
    required: false
    description: Pagination limit.
    type: integer
  Query:
    name: q
    in: query
    required: false
    description: Search query.
    type: string
  HMAC:
    name: h
    in: query
    required: false
    description: This parameter is required when following "next" links.
    type: string
  ScrollId:
    name: scrollId
    in: query
    required: false
    description: This parameter is required when following "next" links.
    type: string
  Offset:
    name: offset
    in: query
    required: false
    description: Specifies the first item to return in the collection.
    type: integer
  After:
    name: after
    in: query
    required: false
    description: >-
      A timestamp filter, expressed as a Unix epoch time in milliseconds. All
      entries returned will have occured after this timestamp.
    format: int64
    type: number
  PatchRequest:
    name: patchDelta
    in: body
    required: true
    description: >-
      Requires a JSON Patch representation of the desired changes to the
      project. 'http://jsonpatch.com/'
    schema:
      type: array
      items:
        $ref: '#/definitions/PatchOperation'
  UserSettingsPutRequest:
    name: userSettingsBody
    in: body
    required: true
    schema:
      type: object
      properties:
        setting:
          type: boolean
          description: >
            The variation value to set for the user. Must match the variation
            type of the flag.
  Before:
    name: before
    in: query
    required: false
    description: >-
      A timestamp filter, expressed as a Unix epoch time in milliseconds. All
      entries returned will have before this timestamp.
    type: number
  Q:
    name: q
    in: query
    required: false
    description: >-
      Text to search for. You can search for the full or partial name of the
      resource involved or fullpartial email address of the member who made the
      change.
    type: string
  AuditLimit:
    name: limit
    in: query
    required: false
    description: >-
      A limit on the number of audit log entries to be returned, between 1 and
      20.
    type: number
  Spec:
    name: spec
    in: query
    required: false
    description: >-
      A resource specifier, allowing you to filter audit log listings by
      resource.
    type: string
  MembersPostRequest:
    name: membersBody
    in: body
    required: true
    description: New members to invite.
    schema:
      type: array
      items:
        type: object
        properties:
          email:
            type: string
            example: exampleuser@email.com
          firstName:
            type: string
            example: Bob
          lastName:
            type: string
            example: Loblaw
          role:
            $ref: '#/definitions/Role'
          customRoles:
            type: array
            items:
              $ref: '#/definitions/CustomRoleKeyOrId'
          inlineRole:
            $ref: '#/definitions/Statements'
        required:
          - email
  MemberId:
    name: memberId
    in: path
    required: true
    description: The member ID.
    type: string
  CustomRolePostRequest:
    name: customRoleBody
    in: body
    required: true
    description: New role or roles to create.
    schema:
      type: object
      properties:
        name:
          type: string
          description: Name of the custom role.
          example: revenue team
        description:
          type: string
          description: Description of the custom role.
          example: Description of revenue team role here
        key:
          $ref: '#/definitions/CustomRoleKeyOrId'
        policy:
          type: array
          items:
            $ref: '#/definitions/Policy'
      required:
        - name
        - key
        - policy
  CustomRoleKey:
    name: customRoleKey
    in: path
    required: true
    description: The custom role key.
    type: string
  PatchWithComment:
    name: patchComment
    in: body
    required: true
    description: >-
      Requires a JSON Patch representation of the desired changes to the
      project, and an optional comment. 'http://jsonpatch.com/' Feature flag
      patches also support JSON Merge Patch format.
      'https://tools.ietf.org/html/rfc7386' The addition of comments is also
      supported.
    schema:
      type: object
      properties:
        comment:
          type: string
          example: This is a comment string
        patch:
          type: array
          items:
            $ref: '#/definitions/PatchOperation'
  PatchOnly:
    name: PatchOnly
    in: body
    required: true
    description: >-
      Requires a JSON Patch representation of the desired changes to the
      project. 'http://jsonpatch.com/' Feature flag patches also support JSON
      Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of
      comments is also supported.
    schema:
      type: array
      items:
        $ref: '#/definitions/PatchOperation'

